##########   ESSENTIALS   ##########

### INTRODUCTION

# L√† Progressive Framework
  - Full-featured framework cung c·∫•p m·ªçi th·ª© ƒë·ªÉ x√¢y d·ª±ng app
  - Progressive framework chia nh·ªè c√°c th√†nh ph·∫ßn ƒë·ªÉ l·ª±a ch·ªçn: vuex, vue-router



### VUE INSTANCE

# Create Vue instance
          var vm = new Vue({ // options })

# Reactivity system
  - Data th√™m v√†o khi t·∫°o ra vue object s·∫Ω th√™m v√†o reactivity system, c√≤n c√°c data th√™m v√†o sau
    ƒë√≥ s·∫Ω kh√¥ng.
  - D√πng Object.freeze(obj) ƒë·ªÉ ngƒÉn react t·ªõi object ƒë∆∞·ª£c ch·ªçn

# Properties & methods
  - vm.$data
  - vm.$el 
  - vm.$watch('data_selected', function(newValue, oldValue) {
    // this callback will be called when vm.data_selected is changed
  })

# Lifecycle hooks
          new Vue({
            data: {
              a: 1
            },
            created: function() {
              // ...
            }
          })
  - created, mounted, updated, destroyed, beforeCreate, ...
  - kh√¥ng d√πng arrow function ho·∫∑c callback v√¨ ch√∫ng kh√¥ng c√≥ keyword this, n√≥ lookup this c·ªßa parent

# Interpolation - n·ªôi suy
          <span v-once> {{ message.reverse }}</span>
  - d√πng v-once ƒë·ªÉ kh√¥ng c·∫≠p nh·∫≠t l·∫°i message ƒë√£ hi·ªÉn th·ªã khi data.message thay ƒë·ªïi

# Attribute
          <div v-bind:id="dynamicId></div>
          <div :id="dynamicId></div>

# Directive
          <a v-on:click="doSomething"> ... </a>
          <a @click="doSomething"> ... </a>
          <a @[eventName]="doSomething"> ... </a>
  - dynamic argument          // 2.6.0+
          <a :[attributeName]="url"> ... </a>

# Modifier
          <form @submit.prevent="onSubmit"> ... </form>
  - ch·ªâ r√µ 1 directive r√†ng bu·ªôc theo 1 c√°ch ƒë·∫∑c bi·ªát n√†o ƒë√≥



### Computed properties and Watcher
  - computed kh√°c method ·ªü ch·ªó n√≥ ƒë∆∞·ª£c cached l·∫°i d·ª±a tr√™n dependency v√† thay ƒë·ªïi ch·ªâ khi 
    data n√≥ bind v√†o thay ƒë·ªïi
          computed: {
            now: function () {
              return Date.now()
            }
          }
  - computed tr√™n s·∫Ω kh√¥ng bh thay ƒë·ªïi gi√° tr·ªã v√¨ Date.now() kh√¥ng ph·∫£i reactivity dependency

  # Computed setter
          computed: {
            fullname () {
              get: function () {
                return this.firstName + ' ' + this.lastName
              },
              set: function (newValue) {
                var names = newValue.split(' ')
                this.firstName = names[0]
                this.lastName = names[names.length - 1]
              }
            }
          }

  # Watcher
          watch: {
            data1: function() {},
            data2: function() {}
          }



### Class and style binding
          <div :class="{ active: isActive, a ? b:c }"></div>

          <div :style="{ color: activeColor, fontSize: fontSize + 'px' }"></div>
          
          <div :style="styleObject"></div>
          data: {
            styleObject: {
              color: 'red',
              fontSize: '13px'
            }
          }



### Conditional rendering
  # if-else
          <h1 v-if="awesome">Vue is awesome!</h1>
          <h1 v-else>Oh no üò¢</h1>

  # control reuseable element with key
          <template v-if="loginType === 'username'">
            <label>Username</label>
            <input placeholder="Enter your username" key="username-input">
          </template>
          <template v-else>
            <label>Email</label>
            <input placeholder="Enter your email address" key="email-input">
          </template>
    - label v·∫´n reuse v√¨ n√≥ kh√¥ng c√≥ thu·ªôc t√≠nh key
  
  # v-show
          <h1 v-show="ok">Hello!</h1>



#### List rendering
  # v-for
          <li v-for="n in evenNumbers">{{ n }}</li>

          data: {
            numbers: [ 1, 2, 3, 4, 5 ]
          },
          computed: {
            evenNumbers: function () {
              return this.numbers.filter(function (number) {
                return number % 2 === 0
              })
            }
          }
    - inside v-for blocks we have full access to parent scope properties
    - v-for also supports an optional second argument for the index of the current item.

  # v-for with template
    - render a block with multiple elements

  # inline-patch
    - khi th·ª© t·ª± data items thay ƒë·ªïi, thay v√¨ di chuy·ªÉn DOM ph√π h·ª£p v·ªõi th·ª© t·ª± items,
      Vue s·∫Ω patch m·ªói ph·∫ßn t·ª≠ t·∫°i ch·ªó
    - ƒë·ªÉ Vue c√≥ th·ªÉ nh·∫≠n ra node v√† t√°i s·ª≠ d·ª•ng n√≥ th√¨ c·∫ßn cung c·∫•p thu·ªôc t√≠nh key, th∆∞·ªùng l√† id

  # array change detection
    - Vue wrap c√°c mutation methods ƒë·ªÉ observe: push, pop, shift, unshift, splice, sort, reverse

  # v-for with v-if
    - v-for c√≥ m·ª©c ∆∞u ti√™n cao h∆°n
          <li v-for="todo in todos" v-if="!todo.isComplete">
            {{ todo }}
          </li>



### Events
          <button v-on:click="say('hello', $event)">Add 1</button>
  - params $event theo sau ƒë·ªÉ l·∫•y DOM ban ƒë·∫ßu
  # event modifiers:
      .stop, .prevent, .capture, .self, .once, .passive
          <!-- the click event's propagation will be stopped -->
          <a v-on:click.stop="doThis"></a>

          <!-- the submit event will no longer reload the page -->
          <form v-on:submit.prevent="onSubmit"></form>

          <!-- modifiers can be chained -->
          <a v-on:click.stop.prevent="doThat"></a>

          <!-- just the modifier -->
          <form v-on:submit.prevent></form>

          <!-- use capture mode when adding the event listener -->
          <!-- i.e. an event targeting an inner element is handled here before being handled by that element -->
          <div v-on:click.capture="doThis">...</div>

          <!-- only trigger handler if event.target is the element itself -->
          <!-- i.e. not from a child element -->
          <div v-on:click.self="doThat">...</div> 

  # key modifiers
          <input v-on:keyup.enter="submit">   // only call `vm.submit()` when the `key` is `Enter`
          
          <!-- Alt + C -->
          <input v-on:keyup.alt.67="clear">

          <!-- this will fire even if Alt or Shift is also pressed -->
          <button v-on:click.ctrl="onClick">A</button>

          <!-- this will only fire when Ctrl and no other keys are pressed -->
          <button v-on:click.ctrl.exact="onCtrlClick">A</button>

          <!-- this will only fire when no system modifiers are pressed -->
          <button v-on:click.exact="onClick">A</button>



### Form input binding
  - v-model b·ªè qua gi√° tr·ªã initial, selected, checked c·ªßa input. N√≥ lu√¥n tin t∆∞·ªüng data c·ªßa 
    vue instance l√† ngu·ªìn tin c·∫≠y duy nh·∫•t => n√™n khai b√°o gi√° tr·ªã kh·ªüi t·∫°o trong option data
    c·ªßa component
          <!-- `picked` is a string "a" when checked -->
          <input type="radio" v-model="picked" value="a">

          <!-- `toggle` is either true or false -->
          <input type="checkbox" v-model="toggle">

          <!-- `selected` is a string "abc" when the first option is selected -->
          <select v-model="selected">
            <option value="abc">ABC</option>
          </select>
  - n·∫øu pick nhi·ªÅu checkbox c√≥ c√πng model th√¨ data s·∫Ω ƒë∆∞·ª£c insert th√™m v√†o
  
  # modifiers cho v-model
    - .lazy: sync input with data after change event instead of input event
    - .number: auto typecast to number
    - .trim



### Component basic
  - khai b√°o to√†n c·ª•c component:
          Vue.component('comp_name', { // data, template, ... })  
  - nh·ªØng component ƒë∆∞·ª£c t·∫°o ra nh∆∞ ·ªü tr√™n c√≥ th·ªÉ t√°i s·ª≠ d·ª•ng nh∆∞ 1 custem element trong 
    ph·∫ßn t·ª≠ vue root (ƒë∆∞·ª£c t·∫°o ra b·ªüi new Vue)  
  
  *** data option ph·∫£i l√† m·ªôt h√†m ƒë·ªÉ m·ªói instance c·ªßa n√≥ c√≥ nh·ªØng data ƒë·ªôc l·∫≠p, n·∫øu kh√¥ng
      th√¨ data c·ªßa c√°c instance s·∫Ω chia s·∫ª v·ªõi nhau

  # pass data to child component with props
          Vue.component('blog-post', {
            props: ['title'],
            template: '<h3>{{ title }}</h3>'
          })

          <blog-post title="My journey with Vue"></blog-post>
          <blog-post :title="post.title"></blog-post>

  # listen to child component events
          <blog-post
            ...
            v-on:enlarge-text="postFontSize += $event"    // ho·∫∑c c√≥ th·ªÉ g·ªçi h√†m
          ></blog-post>

          <button v-on:click="$emit('enlarge-text', 1)">
            Enlarge text
          </button>

  # v-model with component's props
          Vue.component('custom-input', {
            props: ['value'],
            template: `
              <input
                v-bind:value="value"
                v-on:input="$emit('input', $event.target.value)"
              >
            `
          })

  # slot
          Vue.component('alert-box', {
            template: `
              <div class="demo-alert-box">
                <strong>Error!</strong>
                <slot></slot>
              </div>
            `
          })

  # dynamic component
          <!-- Component changes when currentTabComponent changes -->
          <component v-bind:is="currentTabComponent"></component>



##########   COMPONENTS IN-DEPTH   ##########

### Registration
  - t√™n component: kebab-case-name, PascalCaseName
  - ƒëƒÉng k√≠ c·ª•c b·ªô: 
          var comp = { /* ... */ }
          
          new Vue({
            el: '#app',
            components: {
              'comp': comp
              // shorthand:
              comp
            }
          })

### Props
  - t√™n props: kebab-case-name, camelCaseName
  - tuy nhi√™n, c√°c thu·ªôc t√≠nh html ph·∫£i k vi·∫øt hoa n√™n l√∫c bind th√¨ ph·∫£i v·ªÅ d·∫°ng kebab
  - static props: kh√¥ng c√≥ :, c√≤n dynamic th√¨ c√≥

          Vue.component('my-component', {
          props: {
            propA: {
              type: Number,
              default: initA()
            },

  # one-way data follow
    - khi data ·ªü parent update, c√°c data ·ªü component con s·∫Ω refresh l·∫°i. Nh∆∞ng ng∆∞·ª£c l·∫°i th√¨ kh√¥ng
    - v√¨ v·∫≠y kh√¥ng n√™n mutate props

  # tr∆∞·ªùng h·ª£p mutate props
    - khi child component nh·∫≠n props l√† gi√° tr·ªã kh·ªüi t·∫°o v√† mu·ªën x√†i n√≥ nh∆∞ 1 data thay ƒë·ªïi sau ƒë√≥
      c√°ch x·ª≠ l√Ω: t·∫°o 1 bi·∫øn data m·ªõi v√† g√°n gi√° tr·ªã kh·ªüi t·∫°o c·ªßa n√≥ b·∫±ng props truy·ªÅn v√†o
    - khi props truy·ªÅn v√†o c·∫ßn x·ª≠ l√Ω xong m·ªõi s·ª≠ d·ª•ng
      c√°ch x·ª≠ l√Ω: t·∫°o computed property

  # custom event
    - v√¨ html l√† case-insensitivity v√† n√≥ chuy·ªÉn h·∫øt th√†nh lowercase n√™n event n√™n l√† kebab-case
    - value c·ªßa checkbox v√† radio btn ƒë∆∞·ª£c s·ª≠ d·ª•ng trong m·ª•c ƒë√≠ch kh√°c n√™n ph·∫£i d√πng option model
      ƒë·ªÉ kh√¥ng b·ªã xung ƒë·ªôt:
          Vue.component('base-checkbox', {
            model: {
              prop: 'checked',
              event: 'change'
            },
            props: {
              checked: Boolean
            },
            template: `
              <input
                type="checkbox"
                v-bind:checked="checked"
                v-on:change="$emit('change', $event.target.checked)"
              >
            `
          })

          <base-checkbox v-model="passToChecked"></base-checkbox>



### Slot
          <button type="submit">
            <slot>Submit</slot>
          </button>

          <submit-button></submit-button>       --> Submit
          <submit-button>Save</submit-button>   --> Save

  # slot name
          // component base-layout
          <div class="container">
            <slot name="header"></slot>
            <slot></slot>
            <slot name="footer"></slot>
          </div>

          <base-layout>
            <template v-slot:header>
              <h1>Here might be a page title</h1>
            </template>

            <p>A paragraph for the main content.</p>
            <p>And another one.</p>

            <template v-slot:footer>
              <p>Here's some contact info</p>
            </template>
          </base-layout>

    - c√≥ th·ªÉ ch·ªâ ƒë·ªãnh r√µ default slot:
          <template v-slot:default>
            <p>A paragraph for the main content.</p>
            <p>And another one.</p>
          </template>

  # scoped slot
    - ƒë·ªÉ truy c·∫≠p data ·ªü component con truy·ªÅn v√†o slot:
          <span>
            <slot v-bind:user="user">
              {{ user.lastName }}
            </slot>
          </span>

          <current-user>
            <template v-slot:header="slotProps">
              {{ slotProps.user.firstName }}
            </template>
          </current-user>



### Dynamic & async component
  # dynamic component 
          <keep-alive>
            <component v-bind:is="currentTabComponent"></component>
          </keep-alive>
    - d√πng keep-alive element ƒë·ªÉ cached l·∫°i v√† s·∫Ω kh√¥ng re-render
  
  # async component
    - define component as a factory function that async resolve component definition
    - Vue only trigger factory function when component need to be rendered and will cached 
      the result for future re-render
          Vue.component('async-example', function (resolve, reject) {
            setTimeout(function () {
              // Pass the component definition to the resolve callback
              resolve({
                template: '<div>I am async!</div>'
              })
            }, 1000)
          })



##########   REUSABILITY & COMPOSITION   ##########

### Mixin
  - ch·ª©a c√°c options c·ªßa m·ªôt component m√† c√≥ th·ªÉ cho c√°c component kh√°c k·∫ø th·ª´a v√† mixed options
          var myMixin = {
            created: function () {
              this.hello()
            },
            methods: {
              hello: function () {
                console.log('hello from mixin!')
              }
            }
          }

          new Vue({
            mixins: [myMixin],
            ...
          })
  
  # conflict
    - data, methods, components, directives: c·ªßa component s·∫Ω ƒë∆∞·ª£c ∆∞u ti√™n
    - hook: tr·ªôn hook c·ªßa c·∫£ mixin v√† component v√†o 1 m·∫£ng r·ªìi g·ªçi theo th·ª© t·ª± mixin tr∆∞·ªõc,
            c·ªßa component sau
  
  # Vue.mixin({ ... }) ƒë·ªÉ khai b√°o mixin to√†n c·ª•c

### Custom directive



###########   CONVENTION   ##########

  - t√™n component ph·∫£i ƒë·∫ßy ƒë·ªß, r√µ r√†ng, l√† multi-word, n√™n l√† kebab-case ho·∫∑c PascalCase
  - t√™n c√°c component n·ªÅn t·∫£ng: BaseButton, AppButton, VButton
  - c√°c component ch·ªâ kh·ªüi t·∫°o 1 l·∫ßn m·ªói trang (n√™n kh√¥ng c√≥ props truy·ªÅn v√†o): TheHeading, TheSideBar
  - t√™n c√°c component cha con: TodoList, TodoListItem, TodoListItemButton
  - t√™n component b·∫Øt ƒë·∫ßu b·∫±ng nh·ªØng t·ª´ chung nh·∫•t: SearchButtonClear, SearchButtonRun, SearchInputQuery
  - component trong single-file component: <MyComponent></MyComponent>
  - component trong DOM template: <my-component></my-component>

  - data ph·∫£i l√† function
  - t√™n prop d·∫°ng camelCase, kebab-case khi g·ªçi trong template
          props: {
            greetingText: String
          }
          <WelcomeMessage greeting-text="hi"/>
  - props ph·∫£i ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a chi ti·∫øt
          props: {
            status: {
              type: String,
              required: true,
              validator: function (value) {
                return [
                  'syncing',
                  'synced',
                  'version-conflict',
                  'error'
                ].indexOf(value) !== -1
              }
            }
          }

  - ph·∫ßn t·ª≠ c√≥ nhi·ªÅu thu·ªôc t√≠nh vi·∫øt th√†nh nhi·ªÅu d√≤ng, m·ªói d√≤ng l√† 1 thu·ªôc t√≠nh
          <img
            src="https://vuejs.org/images/logo.png"
            alt="Vue Logo"
          >

  - lu√¥n d√πng key v·ªõi v-for
  - kh√¥ng d√πng v-if v·ªõi v-for
  - t·∫•t c·∫£ c√°c css c·ªßa component tr·ª´ App ƒë·ªÅu ph·∫£i scoped
  - lu√¥n d√πng prefix $_ cho c√°c private properties
          var myGreatMixin = {
            methods: {
              $_myGreatMixin_update: function () {}
            }
          }

  - before guards
          {
            path: "/destination/:slug",
            beforeEnter: (to, from, next) => {
              const exists = store.destinations.find(
                destination => destination.slug === to.params.slug
              )
              if (exists) {
                next()
              } else {
                next({ name: "notFound" })
              }
            }



###########   VUE ROUTER   ##########

  - router-link ch·∫∑n clickEvent
  - lazy load routes:
          {
            path: "/jamaica",
            name: "jamaica",
            component: () =>
              import(/* webpackChunkName: "brazil" */ "../views/Jamaica.vue"),
          }

  - webpackChunkName show t√™n file js ƒë∆∞·ª£c load ·ªü devtool/js
  - c√≥ th·ªÉ router-link b·∫±ng name ƒë∆∞·ª£c define trong route:
          <router-link :to="{ name: 'DestinationDetails' }" />

  - load l·∫°i content khi path thay ƒë·ªïi (dynamic path)
          <router-view :key="$route.path" />

  - khai b√°o props t·∫°i routes ƒë·ªÉ pass params as props, kh√¥ng c·∫ßn kh·ªüi t·∫°o bi·∫øn trong data n·ªØa
          {
            path: "/details/:slug",
            name: "details",
            props: true,
            component: () =>
              import(/* webpackChunkName: "details" */ "../views/Details.vue"),
          }

          <router-link :to="{ name: 'details', params: { slug: slug } }">

  - nested route
          {
            path: "/destination/:slug",
            children: [
              {
                path: ":experienceSlug",
              }
            ]
          }


###########   VUEX   ##########

# Create
          const store = new Vuex.Store({
            state: {},          // data
            mutations: {},      // commit state
            actions: {},        // update state by call mutations
            getters: {}         // access state
          })



##########   NUXT   ##########

# Installation
  - yarn create nuxt-app <project-name>
  - npx create-nuxt-app <project-name>
  - npm init nuxt-app <project-name>

# Routing
  - Nuxt t·ª± ƒë·ªông sinh vue-router config, d·ª±a tr√™n c√°c file Vue trong folder pages
          pages/
          --| user/
          -----| index.vue
          -----| one.vue
          -----| _id.vue
          --| index.vue

          router: {
            routes: [
              {
                name: 'index',
                path: '/',
                component: 'pages/index.vue'
              },
              {
                name: 'user',
                path: '/user',
                component: 'pages/user/index.vue'
              },
              {
                name: 'user-one',
                path: '/user/one',
                component: 'pages/user/one.vue'
              },
              {
                name: 'user-id',
                path: '/user/:id?',
                component: 'pages/user/_id.vue'
              }
            ]
          }

  - this.$route.params.{parameterName}
  - nested routes:
          pages/
          --| users/
          -----| _id.vue
          -----| index.vue
          --| users.vue

          router: {
            routes: [
              {
                path: '/users',
                component: 'pages/users.vue',
                children: [
                  {
                    path: '',
                    component: 'pages/users/index.vue',
                    name: 'users'
                  },
                  {
                    path: ':id',
                    component: 'pages/users/_id.vue',
                    name: 'users-id'
                  }
                ]
              }
            ]
          }

# Layouts
  - t·∫°o c√°c file layouts trong folder layouts
          <template>
            <Nuxt />
          </template>

  - config layout ·ªü pages
          export default {
            layout: 'blog'
            // page component definitions
          }

  - layout ƒë·∫∑c bi·ªát: layouts/error.vue

# fetch data
  async fetch () {
    this.reviews = await fetch(
      'https://randomuser.me/api/?results=5'
    ).then(res => res.json())
  }

  {{ $fetchState }}       => show pending, error of api
